#version 460
#extension GL_GOOGLE_include_directive : enable

#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable


#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_shader_atomic_float : require


#include "rt_common.glsl"
#include "render_common.glsl"
#include "quaternion.glsl"

layout(local_size_x_id = 0) in;

struct PushConstants
{
	vec4		centerOfMass;
	uint64_t	vertexAddress;
	uint		numInstances;
	uint		numVertices;
	uint		gridExtent;
	float		gridCellSize;
};

layout(push_constant) uniform PushStruct {PushConstants pc;};

layout(binding = 0) uniform PFC { PerFrameConstants pfc;};

layout(binding = 1) buffer instances {Instance inst[];};

layout(binding = 2) buffer voxelGrid {VoxelGridEntry grid[];};

layout(buffer_reference, scalar) buffer Voxels {vec4 v[]; };

void evaluateForces(vec3 oldPos, vec3 newPos, vec3 centerOfMass, Voxels voxels, uint instId, uint otherGID)
{

	//atomicAdd(inst[instId].force.y, -0.0001);
	//atomicAdd(inst[instId].collisionCount, 1);

	uint otherInstId				= otherGID/pc.numVertices;
	uint otherVertId				= otherGID%pc.numVertices;
	mat4 otherModelMat				= inst[otherInstId].modelMat;
	vec3 otherPos					= voxels.v[otherVertId].xyz;
	vec3 otherGlobalPos				= vec3(otherModelMat*vec4(otherPos, 1.0));

	float k = 0.1;
	float n = 0.1;
	float nt = 0.1;
	float kt = 8.0;

	float diameter = 0.01;

	float t = (diameter - length(newPos-otherGlobalPos));

	if(t < 0 ) return;

	//t*=0.0000000001;
	vec3 v				= newPos - oldPos;
	vec3 r_n			= normalize(newPos-centerOfMass);
	vec3 r				= newPos-centerOfMass;
	vec3 fi				= -k*r_n*t;
	vec3 fd				= -n*v;
	vec3 ft				= -nt*(v-r_n*dot(r_n, v));
	vec3 force			= (fi + fd + ft);
	vec3 torque			= cross(r, force)*kt;

	atomicAdd(inst[instId].force.x, force.x);
	atomicAdd(inst[instId].force.y, force.y);
	atomicAdd(inst[instId].force.z, force.z);
	atomicAdd(inst[instId].torque.x, torque.x);
	atomicAdd(inst[instId].torque.y, torque.y);
	atomicAdd(inst[instId].torque.z, torque.z);
	atomicAdd(inst[instId].collisionCount, 1);
}

void evaluateGridCell(ivec3 gridIndexVector, vec3 oldPos, vec3 newPos, vec3 centerOfMass, Voxels voxels, uint gID)
{
	uint instId				= gID/pc.numVertices;
	uint gridIdx			= getGridIndex(gridIndexVector, pc.gridExtent);
	if(gridIdx == MAX_UINT)return;
	uint counter = grid[gridIdx].counter;
	uint numParticles = ((counter & 0x0000FFFF) > (counter >> 16))? (counter & 0x0000FFFF) : (counter >> 16);
	if(numParticles > 0)
	{
		uint idx = grid[gridIdx].particle0;
		if(idx/pc.numVertices!=gID/pc.numVertices)
		{
			evaluateForces(oldPos, newPos, centerOfMass, voxels, instId, idx);

		}
		if(idx == gID)
		{
			grid[gridIdx].counter = (counter << 16);
		}
	}
	if(numParticles > 1)
	{
		uint idx = grid[gridIdx].particle1;
		if(idx/pc.numVertices!=gID/pc.numVertices)
		{
			evaluateForces(oldPos, newPos, centerOfMass, voxels, instId, idx);
		}
	}
	if(numParticles > 2)
	{
		uint idx = grid[gridIdx].particle2;
		if(idx/pc.numVertices!=gID/pc.numVertices)
		{
			evaluateForces(oldPos, newPos, centerOfMass, voxels, instId, idx);
		}
	}
}

void main()
{
	uint gID = gl_GlobalInvocationID.x;
	if(gID>=pc.numVertices*pc.numInstances)return;
	uint instId				= gID/pc.numVertices;
	uint vertId				= gID%pc.numVertices;

	//if(instId!=0)return;

	float deltaT = 0.1;
	mat4 modelMat			= inst[instId].modelMat;
	mat4 oldModelMatrix		= inst[instId].oldModelMat;
	Voxels voxels			= Voxels(pc.vertexAddress);
	vec3 pos				= voxels.v[vertId].xyz;
	vec3 newPos				= vec3(modelMat*vec4(pos, 1.0));
	vec3 oldPos				= vec3(oldModelMatrix*vec4(pos, 1.0));
	vec3 centerOfMass		= vec3(modelMat*vec4(pc.centerOfMass.xyz, 1.0));
	//vec3 gridOffset			= vec3(1,0,1);
	vec3 gridOffset			= vec3(0,0,0);
	ivec3 gridIndexVector	= getGridIndexVector(newPos, gridOffset, pc.gridCellSize);

	// Hot fix
	if(pfc.cnt  < 5) return;

	for(int x = -1; x <=1; x++)
	{
		for(int y = -1; y <=1; y++)
		{
			for(int z = -1; z <=1; z++)
			{
				evaluateGridCell(gridIndexVector + ivec3(x, y, z), oldPos, newPos, centerOfMass, voxels, gID);
			}
		}
	}
	// = 27 = 3*3*3 grid cells evaluated

	// Plane at z=0
	float k = 0.1;
	float n = 0.4;
	float nt = 0.01;
	float kt = 8.0;
	float radius = 0.005;
	float t = (radius + newPos.y);
	if(t < 0 ) return;
	//if(t < 0 ) return;

	vec3 v				= newPos - oldPos;
	vec3 r_n			= normalize(newPos-centerOfMass);
	vec3 r				= newPos-centerOfMass;
	vec3 fi				= -k*r_n*t;
	vec3 fd				= -n*v;
	vec3 ft				= -nt*(v-r_n*dot(r_n, v));
	vec3 force			= fi + fd + ft;
	vec3 torque			= cross(r, force)*kt;

	atomicAdd(inst[instId].force.x, force.x);
	atomicAdd(inst[instId].force.y, force.y);
	atomicAdd(inst[instId].force.z, force.z);

	atomicAdd(inst[instId].torque.x, torque.x);
	atomicAdd(inst[instId].torque.y, torque.y);
	atomicAdd(inst[instId].torque.z, torque.z);
	atomicAdd(inst[instId].collisionCount, 1);
}
