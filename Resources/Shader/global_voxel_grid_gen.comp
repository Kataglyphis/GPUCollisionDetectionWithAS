#version 460
#extension GL_GOOGLE_include_directive : enable

#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable


#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require

#include "rt_common.glsl"
#include "render_common.glsl"
#include "quaternion.glsl"

layout(local_size_x_id = 0) in;

struct PushConstants
{
	vec4		centerOfMass;
	uint64_t	vertexAddress;
	uint		numInstances;
	uint		numVertices;
	uint		gridExtent;
	float		gridCellSize;
};

layout(push_constant) uniform PushStruct {PushConstants pc;};

layout(binding = 0) uniform PFC { PerFrameConstants pfc;};

layout(binding = 1) buffer instances {Instance inst[];};

layout(binding = 2) buffer voxelGrid {VoxelGridEntry grid[];};

layout(buffer_reference, scalar) buffer Voxels {vec4 v[]; };

void main()
{
	if(pfc.cnt  < 5) return;
	uint gID = gl_GlobalInvocationID.x;
	if(gID>=pc.numVertices*pc.numInstances)return;
	uint instId				= gID/pc.numVertices;
	uint vertId				= gID%pc.numVertices;

	float deltaT = 0.1;
	mat4 modelMat			= inst[instId].modelMat;
	Voxels voxels			= Voxels(pc.vertexAddress);
	vec3 pos				= voxels.v[vertId].xyz;
	vec3 worldPos			= vec3(modelMat*vec4(pos, 1.0));
	
	//vec3 gridOffset			= vec3(0,0,0);
	vec3 gridOffset			= vec3(0,0,0);
	ivec3 gridIndexVector	= getGridIndexVector(worldPos, gridOffset, pc.gridCellSize);
	uint gridIdx	= getGridIndex(gridIndexVector, pc.gridExtent);
	if(gridIdx == MAX_UINT)return;

	atomicAnd(grid[gridIdx].counter, 0x0000FFFF);
	uint particleIdx = atomicAdd(grid[gridIdx].counter, 1);
	if(particleIdx == 0)
	{
		grid[gridIdx].particle0 = gID;
	}
	if(particleIdx == 1)
	{
		grid[gridIdx].particle1 = gID;
	}
	if(particleIdx == 2)
	{
		grid[gridIdx].particle2 = gID;
	}
}
