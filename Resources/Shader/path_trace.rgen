#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_buffer_reference2 : require

#include "render_common.glsl"
#include "rt_common.glsl"

#define NUM_SAMPLES 2

layout(location = 0) rayPayloadEXT hitPayload prd;
layout(binding = 0) uniform PER_FRAME_CONSTANTS { PerFrameConstants pfc; };
//layout(binding = 1) buffer instances {Instance inst[];};
layout(binding = 2, set = 0) uniform accelerationStructureEXT topLevelAS;
//layout(binding = 3) uniform sampler smp;
//layout(binding = 4) uniform texture2D tex[TEXTURE_COUNT];
layout(binding = 5, set = 0, rgba32f) uniform image2D image;

void main()
{
    vec4  origin    = pfc.inverseView * vec4(0, 0, 0, 1);
    uint  rayFlags  = gl_RayFlagsNoneEXT;
    float tMin      = 0.1;
    float tMax      = 10000.0;

    vec3 colorAccumulated = vec3(0.0,0.0,0.0);

    const vec2 pixelCenter          = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    uint rngState                   = uint(pixelCenter.x * pfc.width + pixelCenter.y);
    for(uint i = 0; i < NUM_SAMPLES; i++)
    {
        const vec2 randomPixelCenter    = pixelCenter + vec2(stepAndOutputRNGFloat(rngState), stepAndOutputRNGFloat(rngState));
        const vec2 inUV                 = randomPixelCenter/vec2(gl_LaunchSizeEXT.xy);
        vec2 d                          = inUV * 2.0 - 1.0;
        vec4 target                     = pfc.inverseProjection * vec4(d.x, d.y, 1, 1);
        vec4 direction                  = pfc.inverseView * vec4(normalize(target.xyz), 0);
        prd.hitValue                    = vec3(0.0,0.0,1.0);
        prd.recursion                   = -1;
    
        traceRayEXT(topLevelAS, // acceleration structure
              rayFlags,         // rayFlags
              0xFF,             // cullMask
              0,                // sbtRecordOffset
              0,                // sbtRecordStride
              0,                // missIndex
              origin.xyz,       // ray origin
              tMin,             // ray min range
              direction.xyz,    // ray direction
              tMax,             // ray max range
              0                 // payload (location = 0)
        );
        colorAccumulated += prd.hitValue/float(NUM_SAMPLES);
    }

    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(colorAccumulated*1.0, 1.0));
}