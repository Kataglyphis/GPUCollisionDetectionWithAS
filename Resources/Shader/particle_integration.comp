#version 460 
#extension GL_GOOGLE_include_directive : enable

#extension GL_EXT_ray_query : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
//#extension GL_ARB_separate_shader_objects : enable

#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_shader_atomic_float : require

#include "GlobalValues.glsl"
#include "rt_common.glsl"
#include "render_common.glsl"
#include "quaternion.glsl"

layout(local_size_x_id = 0, local_size_y_id = 1, local_size_z_id = 2) in;

layout(binding = 0) buffer buf {
	Particle particles[];
};

layout(binding = 1) uniform _ComputeUBO {
	ComputeUBO compute_ubo;
};

layout (push_constant) uniform _PushConstantCompute {
	PushConstantCompute pc_compute;
};

void main() {
	
	/**
	Layout particle buffer:
	Particles[numParticlesZ * numParticlesY * numParticlesX]
	f.e. u want the particle on the 3D-Position (x,y,z) than do 
	Particles[z * numParticlesY * numParticlesX + y * numParticlesX + x]
	*/

	if(	gl_GlobalInvocationID.x >= pc_compute.numberAndTypeOfParticles.x ||
		gl_GlobalInvocationID.y >= pc_compute.numberAndTypeOfParticles.y || 
		gl_GlobalInvocationID.z >= pc_compute.numberAndTypeOfParticles.z	) return;

	int index = int(gl_GlobalInvocationID.z) * int(pc_compute.numberAndTypeOfParticles.x) * int(pc_compute.numberAndTypeOfParticles.y) + 
				int(gl_GlobalInvocationID.y) * int(pc_compute.numberAndTypeOfParticles.x) +
				int(gl_GlobalInvocationID.x);
	
	float scaled_delta_t = pc_compute.limitsAndTime.w * pc_compute.velocities.w;

	// update parameter 
	// ref: https://en.wikipedia.org/wiki/Verlet_integration
	vec4 position_update =	particles[index].velocity			* scaled_delta_t + 
							particles[index].acceleration		* (scaled_delta_t * scaled_delta_t * 0.5);

	atomicAdd(particles[index].position.x, position_update.x);
	atomicAdd(particles[index].position.y, position_update.y);
	atomicAdd(particles[index].position.z, position_update.z);

	vec4 velocity_update = particles[index].acceleration * scaled_delta_t * 0.5;

	atomicAdd(particles[index].velocity.x, velocity_update.x);
	atomicAdd(particles[index].velocity.y, velocity_update.y);
	atomicAdd(particles[index].velocity.z, velocity_update.z);

}