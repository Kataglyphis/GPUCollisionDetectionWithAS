#version 460

#include "render_common.glsl"
#include "quaternion.glsl"

#define EPSILON 0.01

layout(local_size_x_id = 0) in;

struct PushConstants
{
	uint	numInstances;
	uint	enableGravity;
	float	gravityStrenght;
	uint	enableExplosion;
	vec4	explosionCenter;
	float	explosionStrenght;
};

layout(push_constant) uniform PushStruct {PushConstants pc;};

layout(binding = 0) uniform PFC
{
	PerFrameConstants d;
} pfc;

layout(binding = 1) buffer instances {Instance inst[];};

layout(binding = 2) buffer asInstancesKHR {AccelerationStructureInstanceKHR instKHR[];};

void main()
{
	uint gID = gl_GlobalInvocationID.x;
	if(gID>=pc.numInstances)return;

	//float deltaT = 0.5;
	float deltaT = 1.0;
	vec4 angularVelocity = inst[gID].angularVelocity;
	vec4 rotation = inst[gID].rotation;

	vec4 position	= inst[gID].position;
	vec4 velocity	= inst[gID].velocity;
	vec4 force		= inst[gID].force;
	vec4 torque		= inst[gID].torque;

	uint collisionCnt = inst[gID].collisionCount;

	inst[gID].state		= (collisionCnt > 0) ? 1:0;
	//inst[gID].state = 1;

	// Scale
	vec4 scale = inst[gID].scale;
	mat4 scaleMat = mat4(0.0);
	scaleMat[0][0] = scale.x;
	scaleMat[1][1] = scale.y;
	scaleMat[2][2] = scale.z;
	scaleMat[3][3] = 1.0;


	mat4 oldModelMatrix						= quat_get_matrix(rotation);
	oldModelMatrix[3]						= vec4(position.xyz, 1.0);
	oldModelMatrix							= scaleMat*oldModelMatrix;

	if(collisionCnt>0)
	{
		//float coefAcc = 10.0/float(sqrt(collisionCnt));
		//float coefRot = 1.0/float(sqrt(collisionCnt));
		float coefAcc = 1.0;
		float coefRot = 200.0;
		velocity			+= force*coefAcc;
		angularVelocity		+= torque*coefRot;

	}
	//float gravityCoef = 0.0001;
	float gravityCoef = pc.gravityStrenght*0.0001;
	//float gravityCoef = 0.001;
	if(pc.enableGravity == 1)
	{
		velocity.xyz		+=			vec3(0.0,1.0,0.0)*gravityCoef;
	}

	//float explosionCoef = 0.5;
	float explosionCoef = pc.explosionStrenght;
	//float explosionCoef = 1.0;
	vec3 explosionCenter = pc.explosionCenter.xyz;
	//vec3 explosionCenter = vec3(-50.0,-100.0,-50.0);
	float dist = max(5.0,length(position.xyz-explosionCenter.xyz));
	vec3 dir = normalize(position.xyz-explosionCenter.xyz);
	if(pc.enableExplosion == 1)
	{
		velocity.xyz		+=			dir*(explosionCoef/(dist*dist));
	}
	//velocity.xyz		+=			dir*(explosionCoef/(dist*dist));

	//if (inst[gID].collisionCount < 10)
	//{
	//}
	//else
	//{
	//	velocity.xyz		+=			vec3(0.0,1.0,0.0)*gravityCoef* 0.1;
	//}


	// Rotate
	if(length(angularVelocity.xyz) > EPSILON)
	{
		vec4 angularVelocityQuat = quat(angularVelocity.xyz*deltaT);
		rotation = mult_quat(angularVelocityQuat, rotation);
	}
	// Translate
	position.xyz +=velocity.xyz*deltaT;


	mat4 modelMatrix					= quat_get_matrix(rotation);
	modelMatrix[3]						= vec4(position.xyz, 1.0);
	modelMatrix							= scaleMat*modelMatrix;

	// Write back
	inst[gID].oldModelMat			= oldModelMatrix;
	inst[gID].modelMat				= modelMatrix;
	inst[gID].position				= position;
	inst[gID].rotation				= rotation;
	inst[gID].velocity				= velocity;
	inst[gID].angularVelocity		= angularVelocity;
	inst[gID].torque				= vec4(0.0);
	inst[gID].force					= vec4(0.0, 0.0, 0.0, 0.0);
	inst[gID].collisionCount		= 0;


	uint instanceOffset = 1; //ToDo pass in
	instKHR[gID+instanceOffset].mat	=  mat3x4(transpose(modelMatrix));
	//instKHR[uint(gID/2+instanceOffset)].mat	=  mat3x4(transpose(modelMatrix));
	//instKHR[gID].mat	=  mat3x4(transpose(modelMatrix));
	//instKHR[gID+instanceOffset].placeholder1	=  1;
}